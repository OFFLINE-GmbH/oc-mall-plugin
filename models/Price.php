<?php declare(strict_types=1);

namespace OFFLINE\Mall\Models;

use Illuminate\Database\Eloquent\Builder;
use Model;
use October\Rain\Database\Traits\Nullable;
use October\Rain\Database\Traits\Validation;
use OFFLINE\Mall\Classes\Database\IsStates;
use OFFLINE\Mall\Classes\Utils\Money;

class Price extends Model
{
    use IsStates;
    use Nullable;
    use Validation;

    /**
     * Disable `is_default` handler on IsStates trait.
     * @var null|string
     */
    public const IS_DEFAULT = null;

    /**
     * The table associated with this model.
     * @var string
     */
    public $table = 'offline_mall_prices';

    /**
     * The validation rules for the single attributes.
     * @var array
     */
    public $rules = [ ];

    /**
     * The attributes that are mass assignable.
     * @var array<string>
     */
    public $fillable = [
        'currency_id',
        'price_category_id',
        'priceable_id',
        'priceable_type',
        'price',
        'field',
    ];

    /**
     * Attributes which should be set to null, when empty.
     * @var array
     */
    public $nullable = ['price'];

    /**
     * The relations to eager load on every query.
     * @var array
     */
    public $with = ['currency'];

    /**
     * The belongsTo relationships of this model.
     * @var array
     */
    public $belongsTo = [
        'category' => [
            PriceCategory::class, 
            'key' => 'price_category_id',
            'scope' => 'withDisabled'
        ],
        'currency' => [
            Currency::class,
            'scope' => 'withDisabled'
        ],
    ];

    /**
     * The morphTo relationships of this model.
     * @var array
     */
    public $morphTo = [
        'priceable' => [],
    ];

    /**
     * The mode Money instance.
     * @var Money
     */
    protected $money;

    /**
     * Flag that indicates that this Price was automatically
     * calculated from the base currency.
     * @var bool
     */
    public $autoGenerated = false;

    /**
     * Don't kip internal query check, as used by the IsState trait.
     * @internal
     * @var boolean
     */
    protected $skipEnabledCheck = false;

    /**
     * Create a new Product modal instance.
     * @param array $attributes
     */
    public function __construct(array $attributes = [])
    {
        parent::__construct($attributes);
        $this->money = app(Money::class);
    }

    /**
     * String-Representation of this class instance.
     * @return string
     */
    public function __toString()
    {
        $model = $this instanceof Product || $this instanceof Variant ? $this : null;
        return $this->money->format($this->integer, $model, $this->currency);
    }

    /**
     * Modify is_enabled query, used by the IsStates trait.
     * @param Builder $builder
     * @return Builder
     */
    public function isEnabledQuery(Builder $builder)
    {
        if ($this->skipEnabledCheck) {
            return $builder;
        } else {
            //@todo find a better solution
            $sql = $builder->getQuery()->toSql();
            if (str_contains($sql, 'price_category_id is null') || str_contains($sql, "field = ")) {
                return $builder; // Skips conditioned query checks, such as in Models\ServiceOption or Models\Discount
            }

            $builder->join(
                'offline_mall_price_categories',
                'offline_mall_prices.price_category_id',
                '=',
                'offline_mall_price_categories.id'
            );
            $builder->where('offline_mall_price_categories.is_enabled', true);
            return $builder;
        }
    }

    /**
     * Hook before model has been saved.
     * @return void
     */
    public function beforeSave()
    {
        if ($this->price === null) {
            return $this->delete();
        }
    }

    /**
     * Hook before model has been created.
     * @return void
     */
    public function beforeCreate()
    {
        if ($this->price === null) {
            return false;
        }
    }

    /**
     * The 'price' attribute setter.
     * @param mixed $value
     * @return mixed
     */
    public function setPriceAttribute($value)
    {
        if ($value === null || $value === '') {
            return $this->attributes['price'] = null;
        }

        if ($value === 0 || $value === '0' || $value === '0.00') {
            return $this->attributes['price'] = 0;
        }

        $this->attributes['price'] = round(((float)$value) * 100, 0);
    }

    /**
     * The 'float' attribute getter.
     * @param mixed $value
     * @return null|float
     */
    public function getFloatAttribute(): ?float
    {
        return $this->price === null ? null : floatval($this->price / 100);
    }

    /**
     * The 'integer' attribute getter.
     * @param mixed $value
     * @return null|integer
     */
    public function getIntegerAttribute(): ?int
    {
        return $this->price === null ? null : intval($this->price);
    }

    /**
     * The 'decimal' attribute getter.
     * @param mixed $value
     * @return null|string
     */
    public function getDecimalAttribute(): ?string
    {
        return $this->price === null ? null : number_format($this->price / 100, 2, '.', '');
    }

    /**
     * The 'string' attribute getter.
     * @param mixed $value
     * @return null|string
     */
    public function getStringAttribute(): ?string
    {
        return $this->price === null ? null : strval($this);
    }

    /**
     * Return a new instance of this model with a modified price value.
     * @param mixed $price
     * @return static
     */
    public function withPrice($price): Price
    {
        $new = $this->replicate();
        $new->price = $price;
        return $new;
    }

    /**
     * Return a new instance of this model with a reduced price value.
     * @param int|float $price
     * @return static
     */
    public function withDiscountPercentage($percentage): Price
    {
        return $this->withPrice($this->price * (100 - $percentage) / 10000);
    }

    /**
     * Returns a new price model from a price array.
     * @param array $input
     * @return Price
     */
    static public function fromArray(array $input): Price
    {
        $value = array_get($input, Currency::activeCurrency()->code);
        return new static(['price' => $value / 100]);
    }

    /**
     * Return array presentation of this class.
     * @return string
     */
    public function toArray()
    {
        $data = [
            'id'              => $this->id,
            'price'           => $this->price,
            'price_formatted' => (string) $this,
            'currency'        => [
                'id'       => $this->currency->id,
                'code'     => $this->currency->code,
                'symbol'   => $this->currency->symbol,
                'rate'     => $this->currency->rate,
                'decimals' => $this->currency->decimals,
            ],
            'category' => null,
        ];
        
        if ($this->category) {
            $data['category'] = [
                'sort_order' => $this->category->sort_order,
                'code' => $this->category->code,
            ];
        }

        return $data;
    }
}
